#! /usr/bin/env sh

authorName="Jobin Lawrance"
currentDate=`date +"%d/%m/%Y"`

# resolving current package path
currentPath=$PWD
truncPath=${currentPath/*com/com}
packagePath=$(echo $truncPath | tr / .)

while getopts ":n:a:" opt; do
  case $opt in
    a) 
      authorName=$OPTARG ;;
    n)
        name=$OPTARG
        fileName="${name}Adapter.kt"
        echo "package $packagePath" > $fileName
        echo "import android.support.annotation.LayoutRes" >> $fileName
        echo "import android.support.v7.widget.RecyclerView" >> $fileName
        echo "import android.view.View" >> $fileName
        echo "import android.view.ViewGroup" >> $fileName
        echo $'import kotlinx.android.extensions.LayoutContainer\n' >> $fileName
        echo "/**" >> $fileName
        echo " * Created by $authorName on $currentDate." >> $fileName
        echo " */" >> $fileName
        echo "class ${name}Adapter(@LayoutRes val viewId: Int) : AdapterDelegate<List<DisplayableItem>>() {" >> $fileName
        echo "" >> $fileName
        echo "  override fun isForViewType(items: List<DisplayableItem>, position: Int): Boolean {" >> $fileName
        echo "    return items[position] is ${name}Type" >> $fileName
        echo $'  }\n' >> $fileName


        echo "  override fun onCreateViewHolder(parent: ViewGroup, clickListener: (DisplayableItem, Navigator.Extras) -> Unit): RecyclerView.ViewHolder {" >> $fileName
        echo "    return ${name}ViewHolder(parent.inflate(viewId))" >> $fileName
        echo $'  }\n' >> $fileName

        echo "  override fun onBindViewHolder(items: List<DisplayableItem>, position: Int, holder: RecyclerView.ViewHolder, clickListener: (DisplayableItem, Navigator.Extras) -> Unit) {" >> $fileName
        echo "    (holder as ${name}ViewHolder).onBindViewHolder(items[position] as ${name}Type)" >> $fileName    
        echo $'  }\n' >> $fileName

        echo "  class ${name}ViewHolder(override val containerView: View): RecyclerView.ViewHolder(containerView), LayoutContainer {" >> $fileName
        echo "    fun onBindViewHolder(displayabletype: ${name}Type) = with(displayabletype) {" >> $fileName
        echo "      TODO()" >> $fileName
        echo "    }" >> $fileName
        echo "  }" >> $fileName
        echo "}" >> $fileName
      ;;
    :)
	  echo ""
      echo "Option -$OPTARG requires delegate name as an argument"
      exit 1
      ;;
  esac
done